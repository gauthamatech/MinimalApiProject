Test_Case_ID,Test_Case_Description,Test_Case_Category,Test_Steps
TC001,"Happy Path: Full CRUD flow for Users, Categories, and Products with valid data and dynamic ID chaining",Happy Path,"1. Open URL http://localhost:5210/api/users. Field 'name' is mandatory. Field 'email' is mandatory. 2. POST /api/users with body {""name"":""John Doe"",""email"":""john@example.com""}, expect 201 Created, capture 'id' as userId. 3. PUT /api/users/{userId} with body {""name"":""Jane Smith"",""email"":""jane@example.com""}, expect 204 No Content. 4. GET /api/users/{userId}, expect 200 OK with updated user. 5. Open URL http://localhost:5210/api/categories. Field 'name' is mandatory. Field 'description' is optional. 6. POST /api/categories with body {""name"":""Electronics"",""description"":""Gadgets and devices""}, expect 201 Created, capture 'id' as categoryId. 7. PUT /api/categories/{categoryId} with body {""name"":""Home Appliances"",""description"":""Kitchen and cleaning tools""}, expect 204 No Content. 8. GET /api/categories/{categoryId}, expect 200 OK with updated category. 9. Open URL http://localhost:5210/api/products. Fields 'name', 'price', 'categoryId', 'userId' are mandatory. Field 'description' is optional. 10. POST /api/products with body {""name"":""Laptop"",""price"":999.99,""categoryId"":categoryId,""userId"":userId}, expect 201 Created, capture 'id' as productId. 11. PUT /api/products/{productId} with body {""name"":""Premium Laptop"",""price"":1499.99,""categoryId"":categoryId,""userId"":userId}, expect 204 No Content. 12. GET /api/products/{productId}, expect 200 OK with updated product. 13. DELETE /api/products/{productId}, expect 204 No Content. 14. DELETE /api/categories/{categoryId}, expect 204 No Content. 15. DELETE /api/users/{userId}, expect 204 No Content."
TC002,"Negative Path: Required fields missing or empty for Users, Categories, and Products combined",Negative Path,"1. Open URL http://localhost:5210/api/users. Field 'name' is mandatory. Field 'email' is mandatory. 2. POST /api/users with body {""name"":"""",""email"":""""}, expect 422 with error messages: Field 'name' should error with ""Name is required and cannot be empty""; Field 'email' should error with ""Email must be a valid email address"". 3. Open URL http://localhost:5210/api/categories. Field 'name' is mandatory. 4. POST /api/categories with body {""name"":""""}, expect 422 with error message: Field 'name' should error with ""Name is required and cannot be empty"". 5. Open URL http://localhost:5210/api/products. Fields 'name', 'price', 'categoryId', 'userId' are mandatory. 6. POST /api/products with body {""name"":"""",""price"":"""",""categoryId"":"""",""userId"":""""}, expect 422 with error messages: Field 'name' should error with ""Name is required and cannot be empty""; Field 'price' should error with ""Price must be greater than 0""; Field 'categoryId' should error with ""CategoryId must be a positive integer""; Field 'userId' should error with ""UserId must be a positive integer""."
TC003,"Negative Path: Invalid format and type for email, numeric fields, description, and createdAt datetime combined",Negative Path,"1. Open URL http://localhost:5210/api/users. Field 'email' is mandatory. 2. POST /api/users with body {""name"":""Valid Name"",""email"":""invalid-email""}, expect 422 with error: Field 'email' should error with ""Email must be a valid email address"". 3. Open URL http://localhost:5210/api/categories. Field 'description' is optional. 4. POST /api/categories with body {""name"":""Valid Name"",""description"":123}, expect 422 with error: Field 'description' should error with ""Description must be a string"" (implied). 5. Open URL http://localhost:5210/api/products. Fields 'price', 'categoryId', 'userId' are mandatory. 6. POST /api/products with body {""name"":""Valid Name"",""price"":-10,""categoryId"":0,""userId"":""abc""}, expect 422 with errors: Field 'price' should error with ""Price must be greater than 0""; Field 'categoryId' should error with ""CategoryId must be a positive integer""; Field 'userId' should error with ""UserId must be a positive integer"". 7. POST /api/users with valid data {""name"":""Valid Name"",""email"":""valid@example.com""}, capture userId. 8. PUT /api/users/{userId} with body {""name"":""Valid Name"",""email"":""valid@example.com"",""createdAt"":""invalid-date""}, expect 422 with error: Field 'createdAt' should error with ""CreatedAt must be a valid ISO datetime"" (implied)."
TC004,"Negative Path: Invalid path parameters (non-integer, zero, negative) for Users, Categories, and Products combined",Negative Path,"1. GET /api/users/-1, expect 404 with message ""User not found"". 2. GET /api/users/abc, expect 404 with message ""User not found"". 3. GET /api/categories/0, expect 404 with message ""Category not found"". 4. GET /api/categories/xyz, expect 404 with message ""Category not found"". 5. GET /api/products/-5, expect 404 with message ""Product not found"". 6. GET /api/products/abc, expect 404 with message ""Product not found"". 7. DELETE /api/users/0, expect 404 with message ""User not found"". 8. DELETE /api/categories/abc, expect 404 with message ""Category not found"". 9. DELETE /api/products/xyz, expect 404 with message ""Product not found""."
TC005,Edge Case: Boundary and whitespace-only strings for required string fields across all entities,Edge Case,"1. Open URL http://localhost:5210/api/users. Field 'name' is mandatory. Field 'email' is mandatory. 2. POST /api/users with body {""name"":""   "",""email"":""   ""}, expect 422 with errors: Field 'name' should error with ""Name is required and cannot be empty""; Field 'email' should error with ""Email must be a valid email address"". 3. Open URL http://localhost:5210/api/categories. Field 'name' is mandatory. 4. POST /api/categories with body {""name"":""   ""}, expect 422 with error: Field 'name' should error with ""Name is required and cannot be empty"". 5. Open URL http://localhost:5210/api/products. Fields 'name' is mandatory. 6. POST /api/products with body {""name"":""   ""}, expect 422 with error: Field 'name' should error with ""Name is required and cannot be empty"". 7. POST /api/products with body {""name"":""Valid Name"",""price"":0,""categoryId"":1,""userId"":1}, expect 422 with error: Field 'price' should error with ""Price must be greater than 0"". 8. POST /api/products with body {""name"":""Valid Name"",""price"":0.01,""categoryId"":1,""userId"":1}, expect 201 Created."
TC006,Edge Case: Missing or extra fields in request bodies combined for all entities,Edge Case,"1. Open URL http://localhost:5210/api/users. Field 'name' is mandatory. Field 'email' is mandatory. 2. POST /api/users with empty body {}, expect 422 with errors: Field 'name' should error with ""Name is required and cannot be empty""; Field 'email' should error with ""Email must be a valid email address"". 3. Open URL http://localhost:5210/api/categories. Field 'name' is mandatory. 4. POST /api/categories with body {""name"":""Valid Name"",""extraField"":""extra""}, expect 201 Created ignoring extra field. 5. Open URL http://localhost:5210/api/products. Fields 'name', 'price', 'categoryId', 'userId' are mandatory. 6. POST /api/products with body missing 'price' field, expect 422 with error: Field 'price' should error with ""Price must be greater than 0""."
TC007,Edge Case: createdAt optional field validation in PUT /api/users/{id},Edge Case,"1. POST /api/users with body {""name"":""User Created"",""email"":""usercreated@example.com""}, expect 201 Created, capture 'id' as userId. 2. PUT /api/users/{userId} with body {""name"":""User Updated"",""email"":""userupdated@example.com"",""createdAt"":""2025-08-07T12:00:00Z""}, expect 204 No Content. 3. PUT /api/users/{userId} with body {""name"":""User Updated"",""email"":""userupdated@example.com"",""createdAt"":""invalid-date""}, expect 422 with error: Field 'createdAt' should error with ""CreatedAt must be a valid ISO datetime"". 4. DELETE /api/users/{userId}, expect 204 No Content."
TC008,Negative Path: PUT and DELETE operations with missing or invalid IDs combined for all entities,Negative Path,"1. PUT /api/users with missing ID in path, expect 404 ""Endpoint not found"". 2. PUT /api/users/abc with invalid ID, expect 404 ""User not found"". 3. DELETE /api/users with missing ID, expect 404 ""Endpoint not found"". 4. DELETE /api/users/abc with invalid ID, expect 404 ""User not found"". 5. PUT /api/categories with missing ID, expect 404 ""Endpoint not found"". 6. PUT /api/categories/abc with invalid ID, expect 404 ""Category not found"". 7. DELETE /api/categories with missing ID, expect 404 ""Endpoint not found"". 8. DELETE /api/categories/abc with invalid ID, expect 404 ""Category not found"". 9. PUT /api/products with missing ID, expect 404 ""Endpoint not found"". 10. PUT /api/products/abc with invalid ID, expect 404 ""Product not found"". 11. DELETE /api/products with missing ID, expect 404 ""Endpoint not found"". 12. DELETE /api/products/abc with invalid ID, expect 404 ""Product not found""."
